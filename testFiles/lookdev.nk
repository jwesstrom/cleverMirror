#! C:/Program Files/Nuke9.0v6/nuke-9.0.6.dll -nx
version 9.0 v6
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="0" w="2560" h="1080" fullscreen="1" screen="0">
        <splitter orientation="1">
            <split size="1619"/>
            <splitter orientation="2">
                <split size="1057"/>
                <dock id="" activePageId="Viewer.1" focus="true">
                    <page id="uk.co.thefoundry.scripteditor.1"/>
                    <page id="Viewer.1"/>
                    <page id="Viewer.2"/>
                </dock>
            </splitter>
            <split size="937"/>
            <splitter orientation="2">
                <split size="527"/>
                <dock id="" hideTitles="1" activePageId="Properties.1">
                    <page id="Properties.1"/>
                </dock>
                <split size="526"/>
                <dock id="" activePageId="DAG.1">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name C:/Users/jwess/OneDrive/Dokument/GitHub/cleverMirror/testFiles/lookdev.nk
 frame 49
 last_frame 60
 fps 60
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
}
Transform {
 inputs 0
 center {150 150}
 name Transform1
 xpos -78
 ypos -38
}
NoOp {
 inputs 0
 name cont
 xpos -142
 ypos -156
 addUserKnob {20 User}
 addUserKnob {12 pos2}
 pos2 {{"(sin(2*pi*(phase2+0.0)/size)+1)/2 * (scale-0.0) + 0.0"} {"(sin(2*pi*(phase2+of)/size)+1)/2 * (scale-0.0) + 0.0"}}
 addUserKnob {7 phase2 R -360 360}
 phase2 5
 addUserKnob {7 scale R 0 1000}
 scale 310
 addUserKnob {7 size R 0 300}
 size 100
 addUserKnob {7 phase R -360 360}
 phase -85
 addUserKnob {7 of R -360 360}
 of -75
 addUserKnob {12 pos}
 pos {{"(sin(2*pi*(phase+0.0)/size)+1)/2 * (scale-0.0) + 0.0"} {"(sin(2*pi*(phase+of)/size)+1)/2 * (scale-0.0) + 0.0"}}
}
RotoPaint {
 inputs 0
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x44800000 x44428000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BezierCusped1 512 bezier
     {{cc
       {f 8192}
       {px 1
        {0 0}
        {{=150 x430b8000}
	 {=150 x430f8000}}
        {0 0}
        {0 0}
        {{=cont.pos2.x x43600000}
      {=cont.pos2.y x43890000}}
        {0 0}
        {0 0}
        {{=cont.pos.x x437e8000}
	 {=cont.pos.y x43528000}}
        {0 0}}}     idem}
     {tx 1 x434e0000 x43515555}
     {a osw x41200000 osf 0 str 1 spx x44800000 spy x44428000 sb 1 tt x40a00000}}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 tt 5 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1024 778}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 motionblur_shutter_offset_type centred
 source_black_outside true
 name RotoPaint1
 xpos -155
 ypos -15
}
Rectangle {
 inputs 0
 area {0 0 100 400}
 name Rectangle1
 xpos -258
 ypos -152
}
Transform {
 center {50 0}
 name Transform2
 xpos -258
 ypos -126
}
Radial {
 inputs 0
 area {0 0 300 300}
 softness 0
 name Radial1
 xpos -378
 ypos -145
}
Merge2 {
 inputs 2
 name Merge1
 xpos -317
 ypos -91
}
Constant {
 inputs 0
 channels rgb
 color 0.14
 name Constant1
 xpos 227
 ypos -255
}
CheckerBoard2 {
 inputs 0
 name CheckerBoard1
 xpos 356
 ypos -248
}
Sphere {
 u_extent 168
 v_extent 152.5
 close_top false
 close_bottom false
 name Sphere1
 xpos 172
 ypos -164
}
Group {
 inputs 0
 name Group1
 help "Allows the easy creation of a variety of Waveform Expressions for use in manipulating knob values."
 xpos -29
 ypos -151
 addUserKnob {20 main l Main}
 addUserKnob {26 unnamed_1 l "" +STARTLINE T " "}
 addUserKnob {68 type l "Wave Type" t "Controls what type of wave to generate." M {Random Noise Sine Triangle Square Sawtooth/Sawtooth "Sawtooth/Sawtooth (Parabolic)" "Sawtooth/Sawtooth (Parabolic reversed)" "Sawtooth/Sawtooth (Exponential)" Bounce "" "" "" "" ""}}
 type Sine
 addUserKnob {7 minVal l "Min Value" t "Minimum value you want the wave to reach." R 0 10}
 addUserKnob {7 maxVal l "Max Value" t "Maximum value you want the wave to reach." -STARTLINE R 0 10}
 maxVal 200
 addUserKnob {7 waveLength l WaveLength t "Controls the frequency or cycle length of the wave. The number of frames before the pattern repeats." R 0 50}
 waveLength 17.6
 addUserKnob {7 offset l Offset t "Offsets the frame value to allow control of values at a certain frame" R 0 10}
 addUserKnob {26 unnamed l "" +STARTLINE T " "}
 addUserKnob {22 expButton l "Generate Expression" T "node = nuke.thisNode()\ntype = node.knob('type').getValue()\nexpText = node.knob('expText')\nexpFormula = node.knob('formula')\nexpResult = node.knob('expResult')\ndef setExp():\n    if type == 0: #Random\n        exp = 'random((frame+%s)/%s) * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 1: #Noise\n        exp = '(noise((frame+%s)/%s)+1)/2 * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 2: #Sine\n        exp = '(sin(2*pi*(frame+%s)/%s)+1)/2 * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 3: #Triangle\n        exp = '(asin(sin(2*pi*(frame+%s)/%s))/pi+0.5) * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 4: #Square\n        exp = 'int(sin(2*pi*(frame+%s)/%s)+1) * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 5: #Sawtooth\n        exp = '((frame+%s) %% %s)/%s * (%s-%s) + %s' %(offset,waveLength,waveLength,maxVal,minVal,minVal)\n    if type == 6: #Sawtooth(Parabolic)\n        exp = 'sin((4.93480220054468*(frame+%s)/(pi*%s)) %% (pi/2)) * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 7: #Sawtooth(Parabolic Reversed)\n        exp = 'cos((4.93480220054468*(frame+%s)/(pi*%s)) %% (pi/2)) * (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    if type == 8: #Sawtooth (Exponential)\n        exp = '(exp(2*pi*((frame+%s) %% %s)/%s)-1)/exp(2*pi) * (%s-%s) + %s' %(offset,waveLength,waveLength,maxVal,minVal,minVal)\n    if type == 9: #Bounce\n        exp = 'abs(sin(pi*(frame + %s)/%s))* (%s-%s) + %s' %(offset,waveLength,maxVal,minVal,minVal)\n    return exp\n\nwaveLength = 'waveLength'\noffset = 'offset'\nmaxVal = 'maxVal'\nminVal = 'minVal'\nexpResult.setExpression(setExp())\nexpFormula.setValue(setExp())\n\nwaveLength = node.knob('waveLength').getValue()\noffset = node.knob('offset').getValue()\nmaxVal = node.knob('maxVal').getValue()\nminVal = node.knob('minVal').getValue()\nexpText.setValue(setExp())" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {7 expResult l Result t "The calculated result of the wave at the given frame. Link to this value if you want to control the expression from this node."}
 expResult {{"(sin(2*pi*(frame+offset)/waveLength)+1)/2 * (maxVal-minVal) + minVal"}}
 addUserKnob {26 unnamed_2 l "" +STARTLINE T " "}
 addUserKnob {1 expText l Expression t "The wave in expression form. For copying to another knobs expression value."}
 expText "(sin(2*pi*(frame+0.0)/17.6)+1)/2 * (200.0-0.0) + 0.0"
 addUserKnob {26 unnamed_3 l "" +STARTLINE T " "}
 addUserKnob {1 formula l Formula t "The formula that generates the wave."}
 formula "(sin(2*pi*(frame+offset)/waveLength)+1)/2 * (maxVal-minVal) + minVal"
}
end_group
Invert {
 inputs 0
 name Invert1
 xpos -580
 ypos -130
}
Group {
 inputs 0
 name Group2
 selected true
 xpos -614
 ypos -325
 addUserKnob {20 User}
 addUserKnob {41 format T Constant1.format}
 addUserKnob {4 pjustify l justify M {center left right ""}}
 pjustify left
 addUserKnob {7 pangle l angle R 0 360}
 pangle {{curve x1 0 x60 360}}
 addUserKnob {7 porientation l orientation R 0 360}
}
 Constant {
  inputs 0
  color {1 1 1 1}
  format "200 200 0 0 200 200 1 asd"
  name Constant1
  label "\[python cget_format_data()]"
  xpos 313
  ypos -516
 }
set N264fb000 [stack 0]
 Transform {
  scale 3
  center {{width/2} {height/2}}
  name Transform4
  xpos 215
  ypos -371
 }
set N264fa000 [stack 0]
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name Shuffle1
  xpos 115
  ypos -371
 }
 Dot {
  name Dot4
  tile_color 0xff480000
  note_font "Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic"
  note_font_size 20
  note_font_color 0xcccccccc
  xpos 142
  ypos -62
  addUserKnob {20 User}
  addUserKnob {22 createtx l "create TX knobs" -STARTLINE T "\n\nx=nuke.thisNode()\nif not x.knob('transform_tab') :\n    x.addKnob(nuke.Tab_Knob('transform_tab','Transform'))\n    x.addKnob(nuke.XY_Knob('translate','translate'))\n    x.addKnob(nuke.Double_Knob('rotate','rotate'))\n    x.addKnob(nuke.WH_Knob('scale','scale'))\n    x.addKnob(nuke.Double_Knob('skew','skew'))\n    x.addKnob(nuke.XY_Knob('center','center'))"}
 }
push $N264fa000
 Dot {
  name Dot3
  tile_color 0xff480000
  note_font "Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic"
  note_font_size 20
  note_font_color 0xcccccccc
  xpos 242
  ypos -129
  addUserKnob {20 User}
  addUserKnob {22 createtx l "create TX knobs" -STARTLINE T "\n\nx=nuke.thisNode()\nif not x.knob('transform_tab') :\n    x.addKnob(nuke.Tab_Knob('transform_tab','Transform'))\n    x.addKnob(nuke.XY_Knob('translate','translate'))\n    x.addKnob(nuke.Double_Knob('rotate','rotate'))\n    x.addKnob(nuke.WH_Knob('scale','scale'))\n    x.addKnob(nuke.Double_Knob('skew','skew'))\n    x.addKnob(nuke.XY_Knob('center','center'))"}
 }
push $N264fb000
 Transform {
  translate {{width/2} 0}
  center {{width/2} {height/2}}
  name Transform2
  xpos 515
  ypos -380
 }
 Dot {
  name Dot1
  tile_color 0xff480000
  note_font "Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic Bold Italic"
  note_font_size 20
  note_font_color 0xcccccccc
  xpos 542
  ypos -113
  addUserKnob {20 User}
  addUserKnob {22 createtx l "create TX knobs" -STARTLINE T "\n\nx=nuke.thisNode()\nif not x.knob('transform_tab') :\n    x.addKnob(nuke.Tab_Knob('transform_tab','Transform'))\n    x.addKnob(nuke.XY_Knob('translate','translate'))\n    x.addKnob(nuke.Double_Knob('rotate','rotate'))\n    x.addKnob(nuke.WH_Knob('scale','scale'))\n    x.addKnob(nuke.Double_Knob('skew','skew'))\n    x.addKnob(nuke.XY_Knob('center','center'))"}
 }
push $N264fb000
 Transform {
  translate {0 {height/2}}
  rotate {{(pangle/2)%180}}
  scale 1.5
  center {{width/2} 0}
  name Transform1
  selected true
  xpos 313
  ypos -287
 }
set N27207c00 [stack 0]
 Mirror {
  Vertical true
  name Mirror1
  xpos 430
  ypos -287
 }
set N27206c00 [stack 0]
push $N27207c00
 Merge2 {
  inputs 2
  name Merge3
  xpos 430
  ypos -227
 }
push $N27206c00
push $N27207c00
 Merge2 {
  inputs 2
  operation mask
  name Merge1
  xpos 313
  ypos -227
 }
 Switch {
  inputs 2
  which {{(pangle%360)/2>90}}
  name Switch1
  xpos 313
  ypos -171
 }
 Merge2 {
  inputs 2
  operation stencil
  name Merge2
  xpos 313
  ypos -110
  disable {{pangle>90 x1 1}}
 }
 Switch {
  inputs 3
  which {{pangle==0?2:(pangle%360==0?1:0)}}
  name Switch2
  xpos 313
  ypos -59
 }
 Transform {
  rotate {{(-porientation-90)}}
  center {{width/2} {height/2}}
  name orient
  xpos 313
  ypos 18
 }
 Transform {
  rotate {{pjustify==0?0:pjustify==1?-(pangle%360)/2:(pangle%360)/2}}
  center {{width/2} {height/2}}
  name Transform3
  xpos 313
  ypos 48
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop1
  xpos 313
  ypos 78
 }
 Output {
  name Output1
  xpos 313
  ypos 145
 }
push $N27207c00
 Viewer {
  frame_range 1-100
  fps 25
  name Viewer1
  xpos 313
  ypos -257
 }
end_group
Reformat {
 inputs 0
 type "to box"
 box_fixed true
 name Reformat1
 xpos -444
 ypos -320
}
Group {
 name Group3
 xpos -522
 ypos -238
 addUserKnob {20 User}
 addUserKnob {7 pradius l Radius R 0 1000}
 pradius 100
 addUserKnob {7 pthickness l thickness R 0.001 1}
 pthickness 0.184
 addUserKnob {41 shift l center T Radial2.shift}
 addUserKnob {41 setcenterinput l " input center " -STARTLINE T Radial2.setcenterinput}
 addUserKnob {41 setcenterinputexpr l " input center expr " -STARTLINE T Radial2.setcenterinputexpr}
 addUserKnob {41 setcenterroot l " root center " -STARTLINE T Radial2.setcenterroot}
 addUserKnob {41 useaspect l "use pixel aspect" T Radial2.useaspect}
 addUserKnob {6 pcrop l crop +STARTLINE}
 pcrop true
}
 Input {
  inputs 0
  name Input1
  selected true
  xpos 245
  ypos -334
 }
 Radial {
  cliptype none
  area {{-radius+shift.x} {(-radius2*pixel_aspect)+shift.y} {radius+shift.x} {(radius2*pixel_aspect)+shift.y}}
  softness 0
  name Radial2
  xpos 245
  ypos -263
  addUserKnob {20 Radius}
  addUserKnob {22 squareexpr l "inject radius expr" -STARTLINE T "this=nuke.thisNode()\nradius=this.knob('radius')\nx1='-radius+shift.x'\nx2='(-radius2*pixel_aspect)+shift.y'\nx3='radius+shift.x'\nx4='(radius2*pixel_aspect)+shift.y'\nthis.knob('area').setExpression(x1,0)\nthis.knob('area').setExpression(x2,1)\nthis.knob('area').setExpression(x3,2)\nthis.knob('area').setExpression(x4,3)"}
  addUserKnob {22 linkhv l " link hv " -STARTLINE T "this=nuke.thisNode()\nthis.knob('radius2').setExpression('useaspect?radius/pixel_aspect:radius')"}
  addUserKnob {22 unlinkhv l " unlink hv " -STARTLINE T nuke.thisNode().knob('radius2').clearAnimated()}
  addUserKnob {26 ""}
  addUserKnob {7 radius l "radius h" R 0 2000}
  radius {{pradius}}
  addUserKnob {7 radius2 l "radius v" R 0 2000}
  radius2 {{useaspect?radius/pixel_aspect:radius}}
  addUserKnob {12 shift l center}
  shift {{input.width/2} {input.height/2}}
  addUserKnob {22 setcenterinput l " input center " -STARTLINE T "this=nuke.thisNode()\nif this.input(0) :\n        x=this.input(0).width()/2\n        y=this.input(0).height()/2\nelse:\n        x=nuke.root().width()/2\n        y=nuke.root().height()/2\nthis.knob('shift').clearAnimated()\nthis.knob('shift').setValue(\[x,y])"}
  addUserKnob {22 setcenterinputexpr l " input center expr " -STARTLINE T "this=nuke.thisNode()\nx='input.width/2'\ny='input.height/2'\nthis.knob('shift').setExpression(x,0)\nthis.knob('shift').setExpression(y,1)\n"}
  addUserKnob {22 setcenterroot l " root center " -STARTLINE T "this=nuke.thisNode()\nx=nuke.root().width()/2\ny=nuke.root().height()/2\nthis.knob('shift').clearAnimated()\nthis.knob('shift').setValue(\[x,y])"}
  addUserKnob {6 useaspect l "use pixel aspect" +STARTLINE}
  useaspect true
 }
set N271f9c00 [stack 0]
 Transform {
  scale {{1-pthickness}}
  center {{Radial2.shift} {Radial2.shift}}
  black_outside false
  name Transform1
  xpos 312
  ypos -184
 }
push $N271f9c00
 Merge2 {
  inputs 2
  operation stencil
  name Merge1
  xpos 245
  ypos -119
 }
 Crop {
  box {0 0 {width} {height}}
  name Crop1
  xpos 245
  ypos -89
  disable {{!pcrop}}
 }
 Output {
  name Output1
  xpos 245
  ypos -22
 }
push $N271f9c00
 Viewer {
  frame_range 1-100
  fps 25
  name Viewer1
  xpos 245
  ypos 67
 }
end_group
Merge2 {
 inputs 2
 operation in
 name In
 xpos -614
 ypos -211
}
Viewer {
 frame 49
 frame_range 1-60
 fps 60
 name Viewer1
 xpos -453
 ypos -51
 hide_input true
}
